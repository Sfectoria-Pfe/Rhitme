// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Department table
model Department {
  department_id   String      @id @default(uuid())
  department_name String
  employee        Employee?     @relation("DepartmentHead",fields: [department_head], references: [employee_id], onDelete: SetNull)
  department_head String?     @unique
  employees       Employee[]
}

// Address table
model Address {
  address_id   String   @id @default(uuid())
  state        String
  city         String
  country      String
  zip  String
  street       String
  employee_id  String?  @unique
  employee     Employee? @relation(fields: [employee_id], references: [employee_id] , onDelete: Cascade)
}

// Role table
model Role {
  role_id   String   @id @default(uuid())
  role_name String
  employees Employee[]
}

// Year table
model Year {
  year_id           String    @id @default(uuid())
  year              String
  monthly_absences  Int[]
  monthly_points    Int[]
  employee_id       String
  employee          Employee  @relation(fields: [employee_id], references: [employee_id], onDelete: Cascade)
}

// Report table
model Report {
  report_id    String    @id @default(uuid())
  employee_id  String
  sender       Employee  @relation("reports_sent", fields: [employee_id], references: [employee_id], onDelete: Cascade)
  created_at   DateTime  @default(now())
  title        String
  description  String
 receiver_id  String?
  receiver     Employee? @relation("receiver",fields: [receiver_id], references: [employee_id])
  replies     ReportReply[]
}

// ReportReply table
model ReportReply {
  report_reply_id String   @id @default(uuid())
  report_id       String
  report          Report   @relation(fields: [report_id], references: [report_id], onDelete: Cascade)
  sender_id       String 
  sender          Employee @relation(fields: [sender_id], references: [employee_id])
  created_at      DateTime @default(now())
  content         String
}

// Employee table
model Employee {
  employee_id     String    @id @default(uuid())
  department_id   String
  department      Department @relation(fields: [department_id], references: [department_id], onDelete: Cascade)
  first_name      String
  last_name       String
  phone           String
  birthday        DateTime
  gender          String
  marital_status  String
  cin             String    @unique
  address         Address?  
  email           String    @unique
  password        String
  job             String
  created_at      DateTime  @default(now())
  status          String
  photo           String
  role_id         String
  role            Role      @relation(fields: [role_id], references: [role_id])
  salary          String
  skills          String[]
  last_opened     DateTime?
  reports    Report[]  @relation("reports_sent")
  reports_received Report[]  @relation("receiver")
  years           Year[]
  absences        Absence[] 
  conversations    Conversation[]
  messages_sent   Message[]      
  projects       Project[]
  tasks        Task[] 
  Comments      Comment[]
  reportReplies   ReportReply[]
  departmentHead    Department?     @relation("DepartmentHead")
}

model DepartedEmployee {
  employee_id    String   @id
  department_id  String
  last_name      String
  first_name     String
  phone          String
  birthday       DateTime
  gender         String
  cin            String
  email          String
  password       String
  job            String
  created_at     DateTime
  photo          String
  role_id        String
  marital_status String
  skills         String[]
  salary         String
  date_left      DateTime @default(now())
  reason         String
}

// Absence table
model Absence {
  absence_id    String    @id @default(uuid())
  date          DateTime
  justificated  Boolean
  employee_id   String
  employee      Employee  @relation(fields: [employee_id], references: [employee_id], onDelete: Cascade)
}

// Conversation table
model Conversation {
  conversation_id  String        @id @default(uuid())
  name             String?
  participants     Employee[]
  messages         Message[]
}

// Message table
model Message {
  message_id    String    @id @default(uuid())
  conversation_id String
  conversation Conversation @relation(fields: [conversation_id], references: [conversation_id], onDelete: Cascade)
  employee_id   String
  sender        Employee  @relation(fields: [employee_id], references: [employee_id], onDelete: Cascade)
  content       String
  sent_at       DateTime  @default(now())
  seen          Boolean   @default(false)
}

//Project table 
model Project {
  project_id    String   @id @default(uuid())
  title         String
  description   String
  start         DateTime
  end           DateTime
  revenue       String
  manager       Employee @relation(fields: [manager_id], references: [employee_id])
  manager_id    String
  client        String
  delivered     Boolean
  tasks        Task[] 
}

//Task table
model Task {
  task_id         String       @id @default(uuid())
  project         Project      @relation(fields: [project_id], references: [project_id], onDelete: Cascade)
  project_id      String
  employee        Employee?     @relation(fields: [employee_id], references: [employee_id], onDelete: SetNull)
  employee_id     String?
  title           String
  description     String
  start           DateTime
  end             DateTime
  points          String
  status          String
  manager_approved Boolean
  done_date       DateTime?
  comments        Comment[]
  subtasks        Subtask[]
}

//Comment table 
model Comment {
  comment_id    String    @id @default(uuid()) @db.Uuid
  content       String
  created_at    DateTime  @default(now())
  task          Task      @relation(fields: [task_id], references: [task_id])
  task_id       String
  commentator   Employee  @relation(fields: [commentator_id], references: [employee_id])
  commentator_id   String
}

//Subtask table 
model Subtask {
  subtask_id String @id @default(uuid()) 
  name       String
  done       Boolean @default(false)
  task_id    String
  task       Task    @relation(fields: [task_id], references: [task_id])
}

//Offer table
model Offer {
  offer_id     String     @id @default(uuid())
  title        String
  description  String
  summary      String[]
  requirements String[]
  experience   String
  pay          String
  job_type     String
  workdays     String
  urgent       Boolean
  posts        Post[]
}

//Candidate table
model Candidate {
  candidate_id String     @id @default(uuid())
  first_name   String
  last_name    String
  email        String
  phone        String
  cv           String
  posts        Post[]
}

//Post table
model Post {
  offer        Offer      @relation(fields: [offer_id], references: [offer_id])
  offer_id     String
  candidate    Candidate  @relation(fields: [candidate_id], references: [candidate_id])
  candidate_id String
  created_at   DateTime
  accuracy     Int
  @@unique([offer_id, candidate_id])
}

